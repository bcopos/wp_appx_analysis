Analysis Platform
============

Identifying JS handlers and the methods called by the handler
-------

Steps:
1. Gather all Types
	-For every Type:
		- Get all Methods
			- check for presence of JavaScript interface
				- e.g.: myWebView.ScriptNotify += some_func_here;
					- find ScriptNotify
				- if not:
					- stop
				- else:
					- get all methods called by that function
						- look for sensitive API functions called
						- look for arguments (data tracking/taint)

Data dependency
------

Objective:
	Determine if data passed to a method (i.e. JS handler) flows into method call

Structures needed:
- counter for number of arguments to a method call
- structure holding "tainted" data

Options 1:

simulate stack

Steps:
Given a method X:
1. find if there are any call ins within the body of X
2. if yes, continue
3. maintain two stack structures (one with tainted data and a normal stack of the method as if it was being executed)
4. step through instructions (push and pop data off the tainted stack as necessary)
	push ins: ldarg
	pop ins: stfld
5. if current instruction is call instruction, determine if argument is tainted

For starters, assume return value from ANY function is tainted!
- in v2.0 we'll perform this operation recursively if possible (if not lib func)
	- and/or filter by return type


How to step through program:
- start at first instruction
- iterate through instructions
- determine if ins is push or pop instruction (with respect to stack)
	- how to deal with conditionals and jumps?



Issues:
-------
Data dependency:
- unknown functions:
	e.g. 
	foo(a ,b) {
		c = lib_func(a)
	}
	- Do we mark c as tainted?

Other stuff:
-------

Opcodes that push or pop data onto stack:

PUSH: "ldarg", "ldc", "ldelem", "ldfld", "ldftn", "ldind", "ldlen", "ldloc", "ldnull", "ldsfld", "ldsflda", "ldstr", "ldtoken", "ldvirtftn", "mkrefany"
POP: "pop", "stloc", "stfld"
